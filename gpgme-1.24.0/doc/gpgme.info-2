This is gpgme.info, produced by makeinfo version 6.8 from gpgme.texi.

Copyright © 2002–2008, 2010, 2012–2018 g10 Code GmbH.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU General Public License as
     published by the Free Software Foundation; either version 3 of the
     License, or (at your option) any later version.  The text of the
     license can be found in the section entitled “Copying”.

   This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.
INFO-DIR-SECTION GNU Libraries
START-INFO-DIR-ENTRY
* GPGME: (gpgme).          Adding support for cryptography to your program.
END-INFO-DIR-ENTRY

   This file documents the GPGME library.

   This is Edition 1.24.0-beta635, last updated 29 October 2024, of ‘The
‘GnuPG Made Easy’ Reference Manual’, for Version 1.24.0-beta635.

   Copyright © 2002–2008, 2010, 2012–2018 g10 Code GmbH.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU General Public License as
     published by the Free Software Foundation; either version 3 of the
     License, or (at your option) any later version.  The text of the
     license can be found in the section entitled “Copying”.

   This document is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.


File: gpgme.info,  Node: I/O Callback Example GTK+,  Next: I/O Callback Example GDK,  Prev: I/O Callback Example,  Up: Using External Event Loops

7.8.2.4 I/O Callback Example GTK+
.................................

The I/O callback interface can be used to integrate GPGME with the GTK+
event loop.  The following code snippets shows how this can be done
using the appropriate register and remove I/O callback functions.  In
this example, the private data of the register I/O callback function is
unused.  The event notifications is missing because it does not require
any GTK+ specific setup.

     #include <gtk/gtk.h>

     struct my_gpgme_io_cb
     {
       gpgme_io_cb_t fnc;
       void *fnc_data;
       guint input_handler_id
     };

     void
     my_gpgme_io_cb (gpointer data, gint source, GdkInputCondition condition)
     {
       struct my_gpgme_io_cb *iocb = data;
       (*(iocb->fnc)) (iocb->data, source);
     }

     void
     my_gpgme_remove_io_cb (void *data)
     {
       struct my_gpgme_io_cb *iocb = data;
       gtk_input_remove (data->input_handler_id);
     }

     void
     my_gpgme_register_io_callback (void *data, int fd, int dir, gpgme_io_cb_t fnc,
                                    void *fnc_data, void **tag)
     {
       struct my_gpgme_io_cb *iocb = g_malloc (sizeof (struct my_gpgme_io_cb));
       iocb->fnc = fnc;
       iocb->data = fnc_data;
       iocb->input_handler_id = gtk_input_add_full (fd, dir
                                                        ? GDK_INPUT_READ
                                                        : GDK_INPUT_WRITE,
                                                    my_gpgme_io_callback,
                                                    0, iocb, NULL);
       *tag = iocb;
       return 0;
     }


File: gpgme.info,  Node: I/O Callback Example GDK,  Next: I/O Callback Example Qt,  Prev: I/O Callback Example GTK+,  Up: Using External Event Loops

7.8.2.5 I/O Callback Example GDK
................................

The I/O callback interface can also be used to integrate GPGME with the
GDK event loop.  The following code snippets shows how this can be done
using the appropriate register and remove I/O callback functions.  In
this example, the private data of the register I/O callback function is
unused.  The event notifications is missing because it does not require
any GDK specific setup.

   It is very similar to the GTK+ example in the previous section.

     #include <gdk/gdk.h>

     struct my_gpgme_io_cb
     {
       gpgme_io_cb_t fnc;
       void *fnc_data;
       gint tag;
     };

     void
     my_gpgme_io_cb (gpointer data, gint source, GdkInputCondition condition)
     {
       struct my_gpgme_io_cb *iocb = data;
       (*(iocb->fnc)) (iocb->data, source);
     }

     void
     my_gpgme_remove_io_cb (void *data)
     {
       struct my_gpgme_io_cb *iocb = data;
       gdk_input_remove (data->tag);
     }

     void
     my_gpgme_register_io_callback (void *data, int fd, int dir, gpgme_io_cb_t fnc,
                                    void *fnc_data, void **tag)
     {
       struct my_gpgme_io_cb *iocb = g_malloc (sizeof (struct my_gpgme_io_cb));
       iocb->fnc = fnc;
       iocb->data = fnc_data;
       iocb->tag = gtk_input_add_full (fd, dir ? GDK_INPUT_READ : GDK_INPUT_WRITE,
                                       my_gpgme_io_callback, iocb, NULL);
       *tag = iocb;
       return 0;
     }


File: gpgme.info,  Node: I/O Callback Example Qt,  Prev: I/O Callback Example GDK,  Up: Using External Event Loops

7.8.2.6 I/O Callback Example Qt
...............................

The I/O callback interface can also be used to integrate GPGME with the
Qt event loop.  The following code snippets show how this can be done
using the appropriate register and remove I/O callback functions.  In
this example, the private data of the register I/O callback function is
unused.  The event notifications is missing because it does not require
any Qt specific setup.

     #include <qsocketnotifier.h>
     #include <qapplication.h>

     struct IOCB {
       IOCB( GpgmeIOCb f, void * d, QSocketNotifier * n )
         : func( f ), data( d ), notifier( n ) {}
       GpgmeIOCb func;
       void * data;
       QSocketNotifier * notifier;
     }

     class MyApp : public QApplication {

       // ...

       static void registerGpgmeIOCallback( void * data, int fd, int dir,
                                            GpgmeIOCb func, void * func_data,
                                            void ** tag ) {
         QSocketNotifier * n =
           new QSocketNotifier( fd, dir ? QSocketNotifier::Read
                                        : QSocketNotifier::Write );
         connect( n, SIGNAL(activated(int)),
                  qApp, SLOT(slotGpgmeIOCallback(int)) );
         qApp->mIOCBs.push_back( IOCB( func, func_data, n ) );
         *tag = (void*)n;
       }

       static void removeGpgmeIOCallback( void * tag ) {
         if ( !tag ) return;
         QSocketNotifier * n = static_cast<QSocketNotifier*>( tag );
         for ( QValueList<IOCB>::iterator it = qApp->mIOCBs.begin() ;
               it != qApp->mIOCBs.end() ; ++it )
           if ( it->notifier == n ) {
             delete it->notifier;
             qApp->mIOCBs.erase( it );
             return;
           }
       }

     public slots:
       void slotGpgmeIOCallback( int fd ) {
         for ( QValueList<IOCB>::const_iterator it = mIOCBs.begin() ;
               it != mIOCBs.end() ; ++it )
           if ( it->notifier && it->notifier->socket() == fd )
             (*(it->func)) ( it->func_data, fd );
       }

       // ...

     private:
       QValueList<IOCB> mIOCBs;
       // ...
     };


File: gpgme.info,  Node: Cancellation,  Prev: Using External Event Loops,  Up: Run Control

7.8.3 Cancellation
------------------

Sometimes you do not want to wait for an operation to finish.  GPGME
provides two different functions to achieve that.  The function
‘gpgme_cancel’ takes effect immediately.  When it returns, the operation
is effectively canceled.  However, it has some limitations and can not
be used with synchronous operations.  In contrast, the function
‘gpgme_cancel_async’ can be used with any context and from any thread,
but it is not guaranteed to take effect immediately.  Instead,
cancellation occurs at the next possible time (typically the next time
I/O occurs in the target context).

 -- Function: gpgme_ctx_t gpgme_cancel (gpgme_ctx_t CTX)
     SINCE: 0.4.5

     The function ‘gpgme_cancel’ attempts to cancel a pending operation
     in the context CTX.  This only works if you use the global event
     loop or your own event loop.

     If you use the global event loop, you must not call ‘gpgme_wait’
     during cancellation.  After successful cancellation, you can call
     ‘gpgme_wait’ (optionally waiting on CTX), and the context CTX will
     appear as if it had finished with the error code ‘GPG_ERR_CANCEL’.

     If you use an external event loop, you must ensure that no I/O
     callbacks are invoked for this context (for example by halting the
     event loop).  On successful cancellation, all registered I/O
     callbacks for this context will be unregistered, and a
     ‘GPGME_EVENT_DONE’ event with the error code ‘GPG_ERR_CANCEL’ will
     be signalled.

     The function returns an error code if the cancellation failed (in
     this case the state of CTX is not modified).

 -- Function: gpgme_ctx_t gpgme_cancel_async (gpgme_ctx_t CTX)
     SINCE: 1.1.7

     The function ‘gpgme_cancel_async’ attempts to cancel a pending
     operation in the context CTX.  This can be called by any thread at
     any time after starting an operation on the context, but will not
     take effect immediately.  The actual cancellation happens at the
     next time GPGME processes I/O in that context.

     The function returns an error code if the cancellation failed (in
     this case the state of CTX is not modified).


File: gpgme.info,  Node: UI Server Protocol,  Next: Debugging,  Prev: Contexts,  Up: Top

Appendix A The GnuPG UI Server Protocol
***************************************

This section specifies the protocol used between clients and a User
Interface Server (UI server).  This protocol helps to build a system
where all cryptographic operations are done by a server and the server
is responsible for all dialogs.  Although GPGME has no direct support
for this protocol it is believed that servers will utilize the GPGME
library; thus having the specification included in this manual is an
appropriate choice.  This protocol should be referenced as ‘The GnuPG UI
Server Protocol’.

A server needs to implement these commands:(1)

* Menu:

* UI Server Encrypt::                Encrypt a message.
* UI Server Sign::                   Sign a message.
* UI Server Decrypt::                Decrypt a message.
* UI Server Verify::                 Verify a message.
* UI Server Set Input Files::        Specifying the input files to operate on.
* UI Server Sign/Encrypt Files::     Encrypting and signing files.
* UI Server Verify/Decrypt Files::   Decrypting and verifying files.
* UI Server Import/Export Keys::     Managing certificates.
* UI Server Checksum Files::         Create and verify checksums for files.
* Miscellaneous UI Server Commands::   Commands not related to a specific operation.

   ---------- Footnotes ----------

   (1) In all examples we assume that the connection has already been
established; see the Assuan manual for details.


File: gpgme.info,  Node: UI Server Encrypt,  Next: UI Server Sign,  Up: UI Server Protocol

A.1 UI Server: Encrypt a Message
================================

Before encryption can be done the recipients must be set using the
command:

 -- Command: RECIPIENT STRING

     Set the recipient for the encryption.  STRING is an RFC-2822
     recipient name ("mailbox" as per section 3.4).  This command may or
     may not check the recipient for validity right away; if it does not
     all recipients are expected to be checked at the time of the
     ‘ENCRYPT’ command.  All ‘RECIPIENT’ commands are cumulative until a
     successful ‘ENCRYPT’ command or until a ‘RESET’ command.  Linefeeds
     are obviously not allowed in STRING and should be folded into
     spaces (which are equivalent).

To tell the server the source and destination of the data, the next two
commands are to be used:

 -- Command: INPUT FD=N
     Set the file descriptor for the message to be encrypted to N.  The
     message send to the server is binary encoded.

     GpgOL is a Windows only program, thus N is not a libc file
     descriptor but a regular system handle.  Given that the Assuan
     connection works over a socket, it is not possible to use regular
     inheritance to make the file descriptor available to the server.
     Thus ‘DuplicateHandle’ needs to be used to duplicate a handle to
     the server process.  This is the reason that the server needs to
     implement the ‘GETINFO pid’ command.  Sending this command a second
     time replaces the file descriptor set by the last one.

 -- Command: OUTPUT FD=N [--binary]
     Set the file descriptor to be used for the output (i.e.  the
     encrypted message) to N.  If the option ‘--binary’ is given the
     output shall be in binary format; if not given, the output for
     OpenPGP needs to be ASCII armored and for CMS Base-64 encoded.  For
     details on the file descriptor, see the ‘INPUT’ command.

The setting of the recipients, the data source and destination may
happen in any order, even intermixed.  If this has been done the actual
encryption operation is called using:

 -- Command: ENCRYPT --protocol=NAME

     This command reads the plaintext from the file descriptor set by
     the ‘INPUT’ command, encrypts it and writes the ciphertext to the
     file descriptor set by the ‘OUTPUT’ command.  The server may (and
     should) overlap reading and writing.  The recipients used for the
     encryption are all the recipients set so far.  If any recipient is
     not usable the server should take appropriate measures to notify
     the user about the problem and may cancel the operation by
     returning an error code.  The used file descriptors are void after
     this command; the recipient list is only cleared if the server
     returns success.

     Because GpgOL uses a streaming mode of operation the server is not
     allowed to auto select the protocol and must obey to the mandatory
     PROTOCOL parameter:

     ‘OpenPGP’
          Use the OpenPGP protocol (RFC-2440).
     ‘CMS’
          Use the CMS (PKCS#7) protocol (RFC-3852).

   To support automagically selection of the protocol depending on the
selected keys, the server MAY implement the command:

 -- Command: PREP_ENCRYPT [--protocol=NAME] [--expect-sign]

     This commands considers all recipients set so far and decides
     whether it is able to take input and start the actual encryption.
     This is kind of a dry-run ‘ENCRYPT’ without requiring or using the
     input and output file descriptors.  The server shall cache the
     result of any user selection to avoid asking this again when the
     actual ‘ENCRYPT’ command is send.  The ‘--protocol’ option is
     optional; if it is not given, the server should allow the user to
     select the protocol to be used based on the recipients given or by
     any other means.

     If ‘--expect-sign’ is given the server should expect that the
     message will also be signed and use this hint to present a unified
     recipient and signer selection dialog if possible and desired.  A
     selected signer should then be cached for the expected SIGN command
     (which is expected in the same session but possible on another
     connection).

     If this command is given again before a successful ‘ENCRYPT’
     command, the second one takes effect.

     Before sending the OK response the server shall tell the client the
     protocol to be used (either the one given by the argument or the
     one selected by the user) by means of a status line:

 -- Status line: PROTOCOL NAME
     Advise the client to use the protocol NAME for the ‘ENCRYPT’
     command.  The valid protocol names are listed under the description
     of the ‘ENCRYPT’ command.  The server shall emit exactly one
     PROTOCOL status line.

Here is an example of a complete encryption sequence; client lines are
indicated by a C:, server responses by C::

         C: RESET
         S: OK
         C: RECIPIENT foo@example.net
         S: OK
         C: RECIPIENT bar@example.com
         S: OK
         C: PREP_ENCRYPT
         S: S PROTOCOL OpenPGP
         S: OK
         C: INPUT FD=17
         S: OK
         C: OUTPUT FD=18
         S: OK
         C: ENCRYPT
         S: OK


File: gpgme.info,  Node: UI Server Sign,  Next: UI Server Decrypt,  Prev: UI Server Encrypt,  Up: UI Server Protocol

A.2 UI Server: Sign a Message
=============================

The server needs to implement opaque signing as well as detached
signing.  Due to the nature of OpenPGP messages it is always required to
send the entire message to the server; sending just the hash is not
possible.  The following two commands are required to set the input and
output file descriptors:

 -- Command: INPUT FD=N
     Set the file descriptor for the message to be signed to N.  The
     message send to the server is binary encoded.  For details on the
     file descriptor, see the description of ‘INPUT’ in the ‘ENCRYPT’
     section.

 -- Command: OUTPUT FD=N [--binary]
     Set the file descriptor to be used for the output.  The output is
     either the complete signed message or in case of a detached
     signature just that detached signature.  If the option ‘--binary’
     is given the output shall be in binary format; if not given, the
     output for OpenPGP needs to be ASCII armored and for CMS Base-64
     encoded.  For details on the file descriptor, see the ‘INPUT’
     command.

To allow the server the selection of a non-default signing key the
client may optionally use the ‘SENDER’ command, see *note command
SENDER::.

The signing operation is then initiated by:

 -- Command: SIGN --protocol=NAME [--detached]
     Sign the data set with the ‘INPUT’ command and write it to the sink
     set by OUTPUT. NAME is the signing protocol used for the message.
     For a description of the allowed protocols see the ‘ENCRYPT’
     command.  With option ‘--detached’ given, a detached signature is
     created; this is actually the usual way the command is used.

The client expects the server to send at least this status information
before the final OK response:

 -- Status line: MICALG STRING
     The STRING represents the hash algorithm used to create the
     signature.  It is used with RFC-1847 style signature messages and
     defined by PGP/MIME (RFC-3156) and S/MIME (RFC-3851).  The GPGME
     library has a supporting function ‘gpgme_hash_algo_name’ to return
     the algorithm name as a string.  This string needs to be lowercased
     and for OpenPGP prefixed with "‘pgp-’".


File: gpgme.info,  Node: UI Server Decrypt,  Next: UI Server Verify,  Prev: UI Server Sign,  Up: UI Server Protocol

A.3 UI Server: Decrypt a Message
================================

Decryption may include the verification of OpenPGP messages.  This is
due to the often used combined signing/encryption modus of OpenPGP. The
client may pass an option to the server to inhibit the signature
verification.  The following two commands are required to set the input
and output file descriptors:

 -- Command: INPUT FD=N
     Set the file descriptor for the message to be decrypted to N.  The
     message send to the server is either binary encoded or — in the
     case of OpenPGP — ASCII armored.  For details on the file
     descriptor, see the description of ‘INPUT’ in the ‘ENCRYPT’
     section.

 -- Command: OUTPUT FD=N
     Set the file descriptor to be used for the output.  The output is
     binary encoded.  For details on the file descriptor, see the
     description of ‘INPUT’ in the ‘ENCRYPT’ section.

The decryption is started with the command:

 -- Command: DECRYPT --protocol=NAME [--no-verify]
          [--export-session-key]
     NAME is the encryption protocol used for the message.  For a
     description of the allowed protocols see the ‘ENCRYPT’ command.
     This argument is mandatory.  If the option ‘--no-verify’ is given,
     the server should not try to verify a signature, in case the input
     data is an OpenPGP combined message.  If the option
     ‘--export-session-key’ is given and the underlying engine knows how
     to export the session key, it will appear on a status line


File: gpgme.info,  Node: UI Server Verify,  Next: UI Server Set Input Files,  Prev: UI Server Decrypt,  Up: UI Server Protocol

A.4 UI Server: Verify a Message
===============================

The server needs to support the verification of opaque signatures as
well as detached signatures.  The kind of input sources controls what
kind message is to be verified.

 -- Command: MESSAGE FD=N
     This command is used with detached signatures to set the file
     descriptor for the signed data to N.  The data is binary encoded
     (used verbatim).  For details on the file descriptor, see the
     description of ‘INPUT’ in the ‘ENCRYPT’ section.

 -- Command: INPUT FD=N
     Set the file descriptor for the opaque message or the signature
     part of a detached signature to N.  The message send to the server
     is either binary encoded or – in the case of OpenPGP – ASCII
     armored.  For details on the file descriptor, see the description
     of ‘INPUT’ in the ‘ENCRYPT’ section.

 -- Command: OUTPUT FD=N
     Set the file descriptor to be used for the output.  The output is
     binary encoded and only used for opaque signatures.  For details on
     the file descriptor, see the description of ‘INPUT’ in the
     ‘ENCRYPT’ section.

The verification is then started using:

 -- Command: VERIFY --protocol=NAME [--silent]
     NAME is the signing protocol used for the message.  For a
     description of the allowed protocols see the ‘ENCRYPT’ command.
     This argument is mandatory.  Depending on the combination of
     ‘MESSAGE’ ‘INPUT’ and ‘OUTPUT’ commands, the server needs to select
     the appropriate verification mode:

     MESSAGE and INPUT
          This indicates a detached signature.  Output data is not
          applicable.
     INPUT
          This indicates an opaque signature.  As no output command has
          been given, the server is only required to check the
          signature.
     INPUT and OUTPUT
          This indicates an opaque signature.  The server shall write
          the signed data to the file descriptor set by the output
          command.  This data shall even be written if the signatures
          can’t be verified.

   With ‘--silent’ the server shall not display any dialog; this is for
example used by the client to get the content of opaque signed messages.
The client expects the server to send at least this status information
before the final OK response:

 -- Status line: SIGSTATUS FLAG DISPLAYSTRING
     Returns the status for the signature and a short string explaining
     the status.  Valid values for FLAG are:

     ‘none’
          The message has a signature but it could not not be verified
          due to a missing key.
     ‘green’
          The signature is fully valid.
     ‘yellow’
          The signature is valid but additional information was shown
          regarding the validity of the key.
     ‘red’
          The signature is not valid.

     DISPLAYSTRING is a percent-and-plus-encoded string with a short
     human readable description of the status.  For example

          S SIGSTATUS green Good+signature+from+Keith+Moon+<keith@example.net>

     Note that this string needs to fit into an Assuan line and should
     be short enough to be displayed as short one-liner on the clients
     window.  As usual the encoding of this string is UTF-8 and it
     should be send in its translated form.

     The server shall send one status line for every signature found on
     the message.


File: gpgme.info,  Node: UI Server Set Input Files,  Next: UI Server Sign/Encrypt Files,  Prev: UI Server Verify,  Up: UI Server Protocol

A.5 UI Server: Specifying the input files to operate on.
========================================================

All file related UI server commands operate on a number of input files
or directories, specified by one or more ‘FILE’ commands:

 -- Command: FILE [--clear] NAME
     Add the file or directory NAME to the list of pathnames to be
     processed by the server.  The parameter NAME must be an absolute
     path name (including the drive letter) and is percent espaced (in
     particular, the characters %, = and white space characters are
     always escaped).  If the option ‘--clear’ is given, the list of
     files is cleared before adding NAME.

     Historical note: The original spec did not define ‘--clear’ but the
     keyword ‘--continued’ after the file name to indicate that more
     files are to be expected.  However, this has never been used and
     thus removed from the specs.


File: gpgme.info,  Node: UI Server Sign/Encrypt Files,  Next: UI Server Verify/Decrypt Files,  Prev: UI Server Set Input Files,  Up: UI Server Protocol

A.6 UI Server: Encrypting and signing files.
============================================

First, the input files need to be specified by one or more ‘FILE’
commands.  Afterwards, the actual operation is requested:

 -- Command: ENCRYPT_FILES --nohup
 -- Command: SIGN_FILES --nohup
 -- Command: ENCRYPT_SIGN_FILES --nohup
     Request that the files specified by ‘FILE’ are encrypted and/or
     signed.  The command selects the default action.  The UI server may
     allow the user to change this default afterwards interactively, and
     even abort the operation or complete it only on some of the
     selected files and directories.

     What it means to encrypt or sign a file or directory is specific to
     the preferences of the user, the functionality the UI server
     provides, and the selected protocol.  Typically, for each input
     file a new file is created under the original filename plus a
     protocol specific extension (like ‘.gpg’ or ‘.sig’), which contain
     the encrypted/signed file or a detached signature.  For
     directories, the server may offer multiple options to the user (for
     example ignore or process recursively).

     The ‘ENCRYPT_SIGN_FILES’ command requests a combined sign and
     encrypt operation.  It may not be available for all protocols (for
     example, it is available for OpenPGP but not for CMS).

     The option ‘--nohup’ is mandatory.  It is currently unspecified
     what should happen if ‘--nohup’ is not present.  Because ‘--nohup’
     is present, the server always returns ‘OK’ promptly, and completes
     the operation asynchronously.


File: gpgme.info,  Node: UI Server Verify/Decrypt Files,  Next: UI Server Import/Export Keys,  Prev: UI Server Sign/Encrypt Files,  Up: UI Server Protocol

A.7 UI Server: Decrypting and verifying files.
==============================================

First, the input files need to be specified by one or more ‘FILE’
commands.  Afterwards, the actual operation is requested:

 -- Command: DECRYPT_FILES --nohup
 -- Command: VERIFY_FILES --nohup
 -- Command: DECRYPT_VERIFY_FILES --nohup
     Request that the files specified by ‘FILE’ are decrypted and/or
     verified.  The command selects the default action.  The UI server
     may allow the user to change this default afterwards interactively,
     and even abort the operation or complete it only on some of the
     selected files and directories.

     What it means to decrypt or verify a file or directory is specific
     to the preferences of the user, the functionality the UI server
     provides, and the selected protocol.  Typically, for decryption, a
     new file is created for each input file under the original filename
     minus a protocol specific extension (like ‘.gpg’) which contains
     the original plaintext.  For verification a status is displayed for
     each signed input file, indicating if it is signed, and if yes, if
     the signature is valid.  For files that are signed and encrypted,
     the ‘VERIFY’ command transiently decrypts the file to verify the
     enclosed signature.  For directories, the server may offer multiple
     options to the user (for example ignore or process recursively).

     The option ‘--nohup’ is mandatory.  It is currently unspecified
     what should happen if ‘--nohup’ is not present.  Because ‘--nohup’
     is present, the server always returns ‘OK’ promptly, and completes
     the operation asynchronously.


File: gpgme.info,  Node: UI Server Import/Export Keys,  Next: UI Server Checksum Files,  Prev: UI Server Verify/Decrypt Files,  Up: UI Server Protocol

A.8 UI Server: Managing certificates.
=====================================

First, the input files need to be specified by one or more ‘FILE’
commands.  Afterwards, the actual operation is requested:

 -- Command: IMPORT_FILES --nohup
     Request that the certificates contained in the files specified by
     ‘FILE’ are imported into the local certificate databases.

     For directories, the server may offer multiple options to the user
     (for example ignore or process recursively).

     The option ‘--nohup’ is mandatory.  It is currently unspecified
     what should happen if ‘--nohup’ is not present.  Because ‘--nohup’
     is present, the server always returns ‘OK’ promptly, and completes
     the operation asynchronously.

   FIXME: It may be nice to support an ‘EXPORT’ command as well, which
is enabled by the context menu of the background of a directory.


File: gpgme.info,  Node: UI Server Checksum Files,  Next: Miscellaneous UI Server Commands,  Prev: UI Server Import/Export Keys,  Up: UI Server Protocol

A.9 UI Server: Create and verify checksums for files.
=====================================================

First, the input files need to be specified by one or more ‘FILE’
commands.  Afterwards, the actual operation is requested:

 -- Command: CHECKSUM_CREATE_FILES --nohup
     Request that checksums are created for the files specified by
     ‘FILE’.  The choice of checksum algorithm and the destination
     storage and format for the created checksums depend on the
     preferences of the user and the functionality provided by the UI
     server.  For directories, the server may offer multiple options to
     the user (for example ignore or process recursively).

     The option ‘--nohup’ is mandatory.  It is currently unspecified
     what should happen if ‘--nohup’ is not present.  Because ‘--nohup’
     is present, the server always returns ‘OK’ promptly, and completes
     the operation asynchronously.

 -- Command: CHECKSUM_VERIFY_FILES --nohup
     Request that checksums are created for the files specified by
     ‘FILE’ and verified against previously created and stored
     checksums.  The choice of checksum algorithm and the source storage
     and format for previously created checksums depend on the
     preferences of the user and the functionality provided by the UI
     server.  For directories, the server may offer multiple options to
     the user (for example ignore or process recursively).

     If the source storage of previously created checksums is available
     to the user through the Windows shell, this command may also accept
     such checksum files as ‘FILE’ arguments.  In this case, the UI
     server should instead verify the checksum of the referenced files
     as if they were given as INPUT files.

     The option ‘--nohup’ is mandatory.  It is currently unspecified
     what should happen if ‘--nohup’ is not present.  Because ‘--nohup’
     is present, the server always returns ‘OK’ promptly, and completes
     the operation asynchronously.


File: gpgme.info,  Node: Miscellaneous UI Server Commands,  Prev: UI Server Checksum Files,  Up: UI Server Protocol

A.10 Miscellaneous UI Server Commands
=====================================

The server needs to implement the following commands which are not
related to a specific command:

 -- Command: GETINFO WHAT
     This is a multi purpose command, commonly used to return a variety
     of information.  The required subcommands as described by the WHAT
     parameter are:

     ‘pid’
          Return the process id of the server in decimal notation using
          an Assuan data line.

To allow the server to pop up the windows in the correct relation to the
client, the client is advised to tell the server by sending the option:

 -- Command option: window-id NUMBER
     The NUMBER represents the native window ID of the clients current
     window.  On Windows systems this is a windows handle (‘HWND’) and
     on X11 systems it is the ‘X Window ID’.  The number needs to be
     given as a hexadecimal value so that it is easier to convey pointer
     values (e.g.  ‘HWND’).

A client may want to fire up the certificate manager of the server.  To
do this it uses the Assuan command:

 -- Command: START_KEYMANAGER
     The server shall pop up the main window of the key manager (aka
     certificate manager).  The client expects that the key manager is
     brought into the foregound and that this command immediately
     returns (does not wait until the key manager has been fully brought
     up).

A client may want to fire up the configuration dialog of the server.  To
do this it uses the Assuan command:

 -- Command: START_CONFDIALOG
     The server shall pop up its configuration dialog.  The client
     expects that this dialog is brought into the foregound and that
     this command immediately returns (i.e.  it does not wait until the
     dialog has been fully brought up).

When doing an operation on a mail, it is useful to let the server know
the address of the sender:

 -- Command: SENDER [--info] [--protocol=NAME] EMAIL
     EMAIL is the plain ASCII encoded address ("addr-spec" as per
     RFC-2822) enclosed in angle brackets.  The address set with this
     command is valid until a successful completion of the operation or
     until a ‘RESET’ command.  A second command overrides the effect of
     the first one; if EMAIL is not given and ‘--info’ is not used, the
     server shall use the default signing key.

     If option ‘--info’ is not given, the server shall also suggest a
     protocol to use for signing.  The client may use this suggested
     protocol on its own discretion.  The same status line as with
     PREP_ENCRYPT is used for this.

     The option ‘--protocol’ may be used to give the server a hint on
     which signing protocol should be preferred.

To allow the UI-server to visually identify a running operation or to
associate operations the server MAY support the command:

 -- Command: SESSION NUMBER [STRING]
     The NUMBER is an arbitrary value, a server may use to associate
     simultaneous running sessions.  It is a 32 bit unsigned integer
     with ‘0’ as a special value indicating that no session association
     shall be done.

     If STRING is given, the server may use this as the title of a
     window or, in the case of an email operation, to extract the
     sender’s address.  The string may contain spaces; thus no
     plus-escaping is used.

     This command may be used at any time and overrides the effect of
     the last command.  A ‘RESET’ undoes the effect of this command.


File: gpgme.info,  Node: Debugging,  Next: Deprecated Functions,  Prev: UI Server Protocol,  Up: Top

Appendix B How to solve problems
********************************

Everyone knows that software often does not do what it should do and
thus there is a need to track down problems.  This is in particular true
for applications using a complex library like GPGME and of course also
for the library itself.  Here we give a few hints on how to solve such
problems.

   First of all you should make sure that the keys you want to use are
installed in the GnuPG engine and are usable.  Thus the first test is to
run the desired operation using ‘gpg’ or ‘gpgsm’ on the command line.
If you can’t figure out why things don’t work, you may use GPGME’s built
in trace feature.  This feature is either enabled using the environment
variable ‘GPGME_DEBUG’ or, if this is not possible, by calling the
function ‘gpgme_set_global_flag’.  The value is the trace level and an
optional file name.  If no file name is given the trace output is
printed to ‘stderr’.

For example
     GPGME_DEBUG=9:/home/user/mygpgme.log
(Note that under Windows you use a semicolon in place of the colon to
separate the fields.)

   A trace level of 9 is pretty verbose and thus you may want to start
off with a lower level.  The exact definition of the trace levels and
the output format may change with any release; you need to check the
source code for details.  In any case the trace log should be helpful to
understand what is going going on.  Warning: The trace log may reveal
sensitive details like passphrases or other data you use in your
application.  If you are asked to send a log file, make sure that you
run your tests only with play data.

   The trace function makes use of gpgrt’s logging function and thus the
special ‘socket://’ and ‘tcp://’ files may be used.  Because this
conflicts with the use of colons to separate fields, the following hack
is used: If the file name contains the string ‘^//’ all carets are
replaced by colons.  For example to log to TCP port 42042 this can be
used:
     GPGME_DEBUG=5:tcp^//127.0.0.1^42042


File: gpgme.info,  Node: Deprecated Functions,  Next: Library Copying,  Prev: Debugging,  Up: Top

Appendix C Deprecated Functions
*******************************

For backward compatibility GPGME has a number of functions, data types
and constants which are deprecated and should not be used anymore.  We
document here those which are really old to help understanding old code
and to allow migration to their modern counterparts.

   *Warning:* These interfaces will be removed in a future version of
GPGME.

 -- Function: void gpgme_key_release (gpgme_key_t KEY)
     The function ‘gpgme_key_release’ is equivalent to
     ‘gpgme_key_unref’.

 -- Function: gpgme_error_t gpgme_op_import_ext (gpgme_ctx_t CTX,
          gpgme_data_t KEYDATA, int *NR)
     SINCE: 0.3.9

     The function ‘gpgme_op_import_ext’ is equivalent to:

            gpgme_error_t err = gpgme_op_import (ctx, keydata);
            if (!err)
              {
                gpgme_import_result_t result = gpgme_op_import_result (ctx);
                *nr = result->considered;
              }

 -- Data type: gpgme_error_t (*gpgme_edit_cb_t) (void *HANDLE,
          gpgme_status_code_t STATUS, const char *ARGS, int FD)
     The ‘gpgme_edit_cb_t’ type is the type of functions which GPGME
     calls if it a key edit operation is on-going.  The status code
     STATUS and the argument line ARGS are passed through by GPGME from
     the crypto engine.  The file descriptor FD is -1 for normal status
     messages.  If STATUS indicates a command rather than a status
     message, the response to the command should be written to FD.  The
     HANDLE is provided by the user at start of operation.

     The function should return ‘GPG_ERR_FALSE’ if it did not handle the
     status code, ‘0’ for success, or any other error value.

 -- Function: gpgme_error_t gpgme_op_edit (gpgme_ctx_t CTX,
          gpgme_key_t KEY, gpgme_edit_cb_t FNC, void *HANDLE,
          gpgme_data_t OUT)
     SINCE: 0.3.9

     Note: This function is deprecated, please use ‘gpgme_op_interact’
     instead.

     The function ‘gpgme_op_edit’ processes the key KEY interactively,
     using the edit callback function FNC with the handle HANDLE.  The
     callback is invoked for every status and command request from the
     crypto engine.  The output of the crypto engine is written to the
     data object OUT.

     Note that the protocol between the callback function and the crypto
     engine is specific to the crypto engine and no further support in
     implementing this protocol correctly is provided by GPGME.

     The function returns the error code ‘GPG_ERR_NO_ERROR’ if the edit
     operation completes successfully, ‘GPG_ERR_INV_VALUE’ if CTX or KEY
     is not a valid pointer, and any error returned by the crypto engine
     or the edit callback handler.

 -- Function: gpgme_error_t gpgme_op_edit_start (gpgme_ctx_t CTX,
          gpgme_key_t KEY, gpgme_edit_cb_t FNC, void *HANDLE,
          gpgme_data_t OUT)

     SINCE: 0.3.9

     Note: This function is deprecated, please use
     ‘gpgme_op_interact_start’ instead.

     The function ‘gpgme_op_edit_start’ initiates a ‘gpgme_op_edit’
     operation.  It can be completed by calling ‘gpgme_wait’ on the
     context.  *Note Waiting For Completion::.

     The function returns the error code ‘GPG_ERR_NO_ERROR’ if the
     operation was started successfully, and ‘GPG_ERR_INV_VALUE’ if CTX
     or KEY is not a valid pointer.

 -- Function: gpgme_error_t gpgme_op_card_edit (gpgme_ctx_t CTX,
          gpgme_key_t KEY, gpgme_edit_cb_t FNC, void *HANDLE,
          gpgme_data_t OUT)
     Note: This function is deprecated, please use ‘gpgme_op_interact’
     with the flag ‘GPGME_INTERACT_CARD’ instead.

     The function ‘gpgme_op_card_edit’ is analogous to ‘gpgme_op_edit’,
     but should be used to process the smart card corresponding to the
     key KEY.

 -- Function: gpgme_error_t gpgme_op_card_edit_start (gpgme_ctx_t CTX,
          gpgme_key_t KEY, gpgme_edit_cb_t FNC, void *HANDLE,
          gpgme_data_t OUT)
     Note: This function is deprecated, please use
     ‘gpgme_op_interact_start’ with the flag ‘GPGME_INTERACT_CARD’
     instead.

     The function ‘gpgme_op_card_edit_start’ initiates a
     ‘gpgme_op_card_edit’ operation.  It can be completed by calling
     ‘gpgme_wait’ on the context.  *Note Waiting For Completion::.

     The function returns the error code ‘GPG_ERR_NO_ERROR’ if the
     operation was started successfully, and ‘GPG_ERR_INV_VALUE’ if CTX
     or KEY is not a valid pointer.

 -- Function: gpgme_error_t gpgme_data_new_with_read_cb
          (gpgme_data_t *DH, int (*READFUNC) (void *HOOK, char *BUFFER,
          size_t COUNT, size_t *NREAD), void *HOOK_VALUE)
     The function ‘gpgme_data_new_with_read_cb’ creates a new
     ‘gpgme_data_t’ object and uses the callback function READFUNC to
     retrieve the data on demand.  As the callback function can supply
     the data in any way it wants, this is the most flexible data type
     GPGME provides.  However, it can not be used to write data.

     The callback function receives HOOK_VALUE as its first argument
     whenever it is invoked.  It should return up to COUNT bytes in
     BUFFER, and return the number of bytes actually read in NREAD.  It
     may return ‘0’ in NREAD if no data is currently available.  To
     indicate ‘EOF’ the function should return with an error code of
     ‘-1’ and set NREAD to ‘0’.  The callback function may support to
     reset its internal read pointer if it is invoked with BUFFER and
     NREAD being ‘NULL’ and COUNT being ‘0’.

     The function returns the error code ‘GPG_ERR_NO_ERROR’ if the data
     object was successfully created, ‘GPG_ERR_INV_VALUE’ if DH or
     READFUNC is not a valid pointer, and ‘GPG_ERR_ENOMEM’ if not enough
     memory is available.

 -- Function: gpgme_error_t gpgme_data_rewind (gpgme_data_t DH)
     The function ‘gpgme_data_rewind’ is equivalent to:

            return (gpgme_data_seek (dh, 0, SEEK_SET) == -1)
              ? gpgme_error_from_errno (errno) : 0;

 -- Data type: gpgme_attr_t
     The ‘gpgme_attr_t’ type is used to specify a key or trust item
     attribute.  The following attributes are defined:

     ‘GPGME_ATTR_KEYID’
          This is the key ID of a sub key.  It is representable as a
          string.

     ‘GPGME_ATTR_FPR’
          This is the fingerprint of a sub key.  It is representable as
          a string.

     ‘GPGME_ATTR_ALGO’
          This is the crypto algorithm for which the sub key can be
          used.  It is representable as a string and as a number.  The
          numbers correspond to the ‘enum gcry_pk_algos’ values in the
          gcrypt library.

     ‘GPGME_ATTR_LEN’
          This is the key length of a sub key.  It is representable as a
          number.

     ‘GPGME_ATTR_CREATED’
          This is the timestamp at creation time of a sub key.  It is
          representable as a number.

     ‘GPGME_ATTR_EXPIRE’
          This is the expiration time of a sub key.  It is representable
          as a number.

     ‘GPGME_ATTR_USERID’
          This is a user ID. There can be more than one user IDs in a
          GPGME_KEY_T object.  The first one (with index 0) is the
          primary user ID. The user ID is representable as a number.

     ‘GPGME_ATTR_NAME’
          This is the name belonging to a user ID. It is representable
          as a string.

     ‘GPGME_ATTR_EMAIL’
          This is the email address belonging to a user ID. It is
          representable as a string.

     ‘GPGME_ATTR_COMMENT’
          This is the comment belonging to a user ID. It is
          representable as a string.

     ‘GPGME_ATTR_VALIDITY’
          This is the validity belonging to a user ID. It is
          representable as a string and as a number.  See below for a
          list of available validities.

     ‘GPGME_ATTR_UID_REVOKED’
          This specifies if a user ID is revoked.  It is representable
          as a number, and is ‘1’ if the user ID is revoked, and ‘0’
          otherwise.

     ‘GPGME_ATTR_UID_INVALID’
          This specifies if a user ID is invalid.  It is representable
          as a number, and is ‘1’ if the user ID is invalid, and ‘0’
          otherwise.

     ‘GPGME_ATTR_TYPE’
          This returns information about the type of key.  For the
          string function this will eother be "PGP" or "X.509".  The
          integer function returns 0 for PGP and 1 for X.509.

     ‘GPGME_ATTR_IS_SECRET’
          This specifies if the key is a secret key.  It is
          representable as a number, and is ‘1’ if the key is revoked,
          and ‘0’ otherwise.

     ‘GPGME_ATTR_KEY_REVOKED’
          This specifies if a sub key is revoked.  It is representable
          as a number, and is ‘1’ if the key is revoked, and ‘0’
          otherwise.

     ‘GPGME_ATTR_KEY_INVALID’
          This specifies if a sub key is invalid.  It is representable
          as a number, and is ‘1’ if the key is invalid, and ‘0’
          otherwise.

     ‘GPGME_ATTR_KEY_EXPIRED’
          This specifies if a sub key is expired.  It is representable
          as a number, and is ‘1’ if the key is expired, and ‘0’
          otherwise.

     ‘GPGME_ATTR_KEY_DISABLED’
          This specifies if a sub key is disabled.  It is representable
          as a number, and is ‘1’ if the key is disabled, and ‘0’
          otherwise.

     ‘GPGME_ATTR_KEY_CAPS’
          This is a description of the capabilities of a sub key.  It is
          representable as a string.  The string contains the letter “e”
          if the key can be used for encryption, “s” if the key can be
          used for signatures, and “c” if the key can be used for
          certifications.

     ‘GPGME_ATTR_CAN_ENCRYPT’
          This specifies if a sub key can be used for encryption.  It is
          representable as a number, and is ‘1’ if the sub key can be
          used for encryption, and ‘0’ otherwise.

     ‘GPGME_ATTR_CAN_SIGN’
          This specifies if a sub key can be used to create data
          signatures.  It is representable as a number, and is ‘1’ if
          the sub key can be used for signatures, and ‘0’ otherwise.

     ‘GPGME_ATTR_CAN_CERTIFY’
          This specifies if a sub key can be used to create key
          certificates.  It is representable as a number, and is ‘1’ if
          the sub key can be used for certifications, and ‘0’ otherwise.

     ‘GPGME_ATTR_SERIAL’
          The X.509 issuer serial attribute of the key.  It is
          representable as a string.

     ‘GPGME_ATTR_ISSUE’
          The X.509 issuer name attribute of the key.  It is
          representable as a string.

     ‘GPGME_ATTR_CHAINID’
          The X.509 chain ID can be used to build the certification
          chain.  It is representable as a string.

 -- Function: const char * gpgme_key_get_string_attr (gpgme_key_t KEY,
          gpgme_attr_t WHAT, const void *RESERVED, int IDX)
     The function ‘gpgme_key_get_string_attr’ returns the value of the
     string-representable attribute WHAT of key KEY.  If the attribute
     is an attribute of a sub key or an user ID, IDX specifies the sub
     key or user ID of which the attribute value is returned.  The
     argument RESERVED is reserved for later use and should be ‘NULL’.

     The string returned is only valid as long as the key is valid.

     The function returns ‘0’ if an attribute can’t be returned as a
     string, KEY is not a valid pointer, IDX out of range, or RESERVED
     not ‘NULL’.

 -- Function: unsigned long gpgme_key_get_ulong_attr (gpgme_key_t KEY,
          gpgme_attr_t WHAT, const void *RESERVED, int IDX)
     The function ‘gpgme_key_get_ulong_attr’ returns the value of the
     number-representable attribute WHAT of key KEY.  If the attribute
     is an attribute of a sub key or an user ID, IDX specifies the sub
     key or user ID of which the attribute value is returned.  The
     argument RESERVED is reserved for later use and should be ‘NULL’.

     The function returns ‘0’ if the attribute can’t be returned as a
     number, KEY is not a valid pointer, IDX out of range, or RESERVED
     not ‘NULL’.

   The signatures on a key are only available if the key was retrieved
via a listing operation with the ‘GPGME_KEYLIST_MODE_SIGS’ mode enabled,
because it is expensive to retrieve all signatures of a key.

   So, before using the below interfaces to retrieve the signatures on a
key, you have to make sure that the key was listed with signatures
enabled.  One convenient, but blocking, way to do this is to use the
function ‘gpgme_get_key’.

 -- Data type: gpgme_attr_t
     The ‘gpgme_attr_t’ type is used to specify a key signature
     attribute.  The following attributes are defined:

     ‘GPGME_ATTR_KEYID’
          This is the key ID of the key which was used for the
          signature.  It is representable as a string.

     ‘GPGME_ATTR_ALGO’
          This is the crypto algorithm used to create the signature.  It
          is representable as a string and as a number.  The numbers
          correspond to the ‘enum gcry_pk_algos’ values in the gcrypt
          library.

     ‘GPGME_ATTR_CREATED’
          This is the timestamp at creation time of the signature.  It
          is representable as a number.

     ‘GPGME_ATTR_EXPIRE’
          This is the expiration time of the signature.  It is
          representable as a number.

     ‘GPGME_ATTR_USERID’
          This is the user ID associated with the signing key.  The user
          ID is representable as a number.

     ‘GPGME_ATTR_NAME’
          This is the name belonging to a user ID. It is representable
          as a string.

     ‘GPGME_ATTR_EMAIL’
          This is the email address belonging to a user ID. It is
          representable as a string.

     ‘GPGME_ATTR_COMMENT’
          This is the comment belonging to a user ID. It is
          representable as a string.

     ‘GPGME_ATTR_KEY_REVOKED’
          This specifies if a key signature is a revocation signature.
          It is representable as a number, and is ‘1’ if the key is
          revoked, and ‘0’ otherwise.

     ‘GPGME_ATTR_SIG_CLASS’
          This specifies the signature class of a key signature.  It is
          representable as a number.  The meaning is specific to the
          crypto engine.

     ‘GPGME_ATTR_SIG_CLASS’
          This specifies the signature class of a key signature.  It is
          representable as a number.  The meaning is specific to the
          crypto engine.

     ‘GPGME_ATTR_SIG_STATUS’
          This is the same value as returned by ‘gpgme_get_sig_status’.

 -- Function: const char * gpgme_key_sig_get_string_attr
          (gpgme_key_t KEY, int UID_IDX, gpgme_attr_t WHAT,
          const void *RESERVED, int IDX)
     The function ‘gpgme_key_sig_get_string_attr’ returns the value of
     the string-representable attribute WHAT of the signature IDX on the
     user ID UID_IDX in the key KEY.  The argument RESERVED is reserved
     for later use and should be ‘NULL’.

     The string returned is only valid as long as the key is valid.

     The function returns ‘0’ if an attribute can’t be returned as a
     string, KEY is not a valid pointer, UID_IDX or IDX out of range, or
     RESERVED not ‘NULL’.

 -- Function: unsigned long gpgme_key_sig_get_ulong_attr
          (gpgme_key_t KEY, int UID_IDX, gpgme_attr_t WHAT,
          const void *RESERVED, int IDX)
     The function ‘gpgme_key_sig_get_ulong_attr’ returns the value of
     the number-representable attribute WHAT of the signature IDX on the
     user ID UID_IDX in the key KEY.  The argument RESERVED is reserved
     for later use and should be ‘NULL’.

     The function returns ‘0’ if an attribute can’t be returned as a
     string, KEY is not a valid pointer, UID_IDX or IDX out of range, or
     RESERVED not ‘NULL’.

 -- Data type: enum gpgme_sig_stat_t
     The ‘gpgme_sig_stat_t’ type holds the result of a signature check,
     or the combined result of all signatures.  The following results
     are possible:

     ‘GPGME_SIG_STAT_NONE’
          This status should not occur in normal operation.

     ‘GPGME_SIG_STAT_GOOD’
          This status indicates that the signature is valid.  For the
          combined result this status means that all signatures are
          valid.

     ‘GPGME_SIG_STAT_GOOD_EXP’
          This status indicates that the signature is valid but expired.
          For the combined result this status means that all signatures
          are valid and expired.

     ‘GPGME_SIG_STAT_GOOD_EXPKEY’
          This status indicates that the signature is valid but the key
          used to verify the signature has expired.  For the combined
          result this status means that all signatures are valid and all
          keys are expired.

     ‘GPGME_SIG_STAT_BAD’
          This status indicates that the signature is invalid.  For the
          combined result this status means that all signatures are
          invalid.

     ‘GPGME_SIG_STAT_NOKEY’
          This status indicates that the signature could not be verified
          due to a missing key.  For the combined result this status
          means that all signatures could not be checked due to missing
          keys.

     ‘GPGME_SIG_STAT_NOSIG’
          This status indicates that the signature data provided was not
          a real signature.

     ‘GPGME_SIG_STAT_ERROR’
          This status indicates that there was some other error which
          prevented the signature verification.

     ‘GPGME_SIG_STAT_DIFF’
          For the combined result this status means that at least two
          signatures have a different status.  You can get each key’s
          status with ‘gpgme_get_sig_status’.

 -- Function: const char * gpgme_get_sig_status (gpgme_ctx_t CTX,
          int IDX, gpgme_sig_stat_t *R_STAT, time_t *R_CREATED)
     The function ‘gpgme_get_sig_status’ is equivalent to:

            gpgme_verify_result_t result;
            gpgme_signature_t sig;

            result = gpgme_op_verify_result (ctx);
            sig = result->signatures;

            while (sig && idx)
              {
                sig = sig->next;
                idx--;
              }
            if (!sig || idx)
              return NULL;

            if (r_stat)
              {
                switch (gpg_err_code (sig->status))
          	{
          	case GPG_ERR_NO_ERROR:
          	  *r_stat = GPGME_SIG_STAT_GOOD;
          	  break;

          	case GPG_ERR_BAD_SIGNATURE:
          	  *r_stat = GPGME_SIG_STAT_BAD;
          	  break;

          	case GPG_ERR_NO_PUBKEY:
          	  *r_stat = GPGME_SIG_STAT_NOKEY;
          	  break;

          	case GPG_ERR_NO_DATA:
          	  *r_stat = GPGME_SIG_STAT_NOSIG;
          	  break;

          	case GPG_ERR_SIG_EXPIRED:
          	  *r_stat = GPGME_SIG_STAT_GOOD_EXP;
          	  break;

          	case GPG_ERR_KEY_EXPIRED:
          	  *r_stat = GPGME_SIG_STAT_GOOD_EXPKEY;
          	  break;

          	default:
          	  *r_stat = GPGME_SIG_STAT_ERROR;
          	  break;
          	}
              }
            if (r_created)
              *r_created = sig->timestamp;
            return sig->fpr;

 -- Function: const char * gpgme_get_sig_string_attr (gpgme_ctx_t CTX,
          int IDX, gpgme_attr_t WHAT, int WHATIDX)
     The function ‘gpgme_get_sig_string_attr’ is equivalent to:

            gpgme_verify_result_t result;
            gpgme_signature_t sig;

            result = gpgme_op_verify_result (ctx);
            sig = result->signatures;

            while (sig && idx)
              {
                sig = sig->next;
                idx--;
              }
            if (!sig || idx)
              return NULL;

            switch (what)
              {
              case GPGME_ATTR_FPR:
                return sig->fpr;

              case GPGME_ATTR_ERRTOK:
                if (whatidx == 1)
                  return sig->wrong_key_usage ? "Wrong_Key_Usage" : "";
                else
          	return "";
              default:
                break;
              }

            return NULL;

 -- Function: const char * gpgme_get_sig_ulong_attr (gpgme_ctx_t CTX,
          int IDX, gpgme_attr_t WHAT, int WHATIDX)
     The function ‘gpgme_get_sig_ulong_attr’ is equivalent to:

            gpgme_verify_result_t result;
            gpgme_signature_t sig;

            result = gpgme_op_verify_result (ctx);
            sig = result->signatures;

            while (sig && idx)
              {
                sig = sig->next;
                idx--;
              }
            if (!sig || idx)
              return 0;

            switch (what)
              {
              case GPGME_ATTR_CREATED:
                return sig->timestamp;

              case GPGME_ATTR_EXPIRE:
                return sig->exp_timestamp;

              case GPGME_ATTR_VALIDITY:
                return (unsigned long) sig->validity;

              case GPGME_ATTR_SIG_STATUS:
                switch (sig->status)
          	{
          	case GPG_ERR_NO_ERROR:
          	  return GPGME_SIG_STAT_GOOD;

          	case GPG_ERR_BAD_SIGNATURE:
          	  return GPGME_SIG_STAT_BAD;

          	case GPG_ERR_NO_PUBKEY:
          	  return GPGME_SIG_STAT_NOKEY;

          	case GPG_ERR_NO_DATA:
          	  return GPGME_SIG_STAT_NOSIG;

          	case GPG_ERR_SIG_EXPIRED:
          	  return GPGME_SIG_STAT_GOOD_EXP;

          	case GPG_ERR_KEY_EXPIRED:
          	  return GPGME_SIG_STAT_GOOD_EXPKEY;

          	default:
          	  return GPGME_SIG_STAT_ERROR;
          	}

              case GPGME_ATTR_SIG_SUMMARY:
                return sig->summary;

              default:
                break;
              }
            return 0;

 -- Function: const char * gpgme_get_sig_key (gpgme_ctx_t CTX, int IDX,
          gpgme_key_t *R_KEY)
     The function ‘gpgme_get_sig_key’ is equivalent to:

            gpgme_verify_result_t result;
            gpgme_signature_t sig;

            result = gpgme_op_verify_result (ctx);
            sig = result->signatures;

            while (sig && idx)
              {
                sig = sig->next;
                idx--;
              }
            if (!sig || idx)
              return gpg_error (GPG_ERR_EOF);

            return gpgme_get_key (ctx, sig->fpr, r_key, 0);


File: gpgme.info,  Node: Library Copying,  Next: Copying,  Prev: Deprecated Functions,  Up: Top

GNU Lesser General Public License
*********************************

                      Version 2.1, February 1999

     Copyright © 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place – Suite 330, Boston, MA 02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

     [This is the first released version of the Lesser GPL.  It also counts
     as the successor of the GNU Library Public License, version 2, hence the
     version number 2.1.]

Preamble
========

The licenses for most software are designed to take away your freedom to
share and change it.  By contrast, the GNU General Public Licenses are
intended to guarantee your freedom to share and change free software—to
make sure the software is free for all its users.

   This license, the Lesser General Public License, applies to some
specially designated software—typically libraries—of the Free Software
Foundation and other authors who decide to use it.  You can use it too,
but we suggest you first think carefully about whether this license or
the ordinary General Public License is the better strategy to use in any
particular case, based on the explanations below.

   When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of it
in new free programs; and that you are informed that you can do these
things.

   To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

   For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling it.
And you must show them these terms so they know their rights.

   We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

   To protect each distributor, we want to make it very clear that there
is no warranty for the free library.  Also, if the library is modified
by someone else and passed on, the recipients should know that what they
have is not the original version, so that the original author’s
reputation will not be affected by problems that might be introduced by
others.

   Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that any
patent license obtained for a version of the library must be consistent
with the full freedom of use specified in this license.

   Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and is
quite different from the ordinary General Public License.  We use this
license for certain libraries in order to permit linking those libraries
into non-free programs.

   When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the entire
combination fits its criteria of freedom.  The Lesser General Public
License permits more lax criteria for linking other code with the
library.

   We call this license the “Lesser” General Public License because it
does _Less_ to protect the user’s freedom than the ordinary General
Public License.  It also provides other free software developers Less of
an advantage over competing non-free programs.  These disadvantages are
the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

   For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it
becomes a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free library
does the same job as widely used non-free libraries.  In this case,
there is little to gain by limiting the free library to free software
only, so we use the Lesser General Public License.

   In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of free
software.  For example, permission to use the GNU C Library in non-free
programs enables many more people to use the whole GNU operating system,
as well as its variant, the GNU/Linux operating system.

   Although the Lesser General Public License is Less protective of the
users’ freedom, it does ensure that the user of a program that is linked
with the Library has the freedom and the wherewithal to run that program
using a modified version of the Library.

   The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
“work based on the library” and a “work that uses the library”.  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

                   GNU LESSER GENERAL PUBLIC LICENSE
    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
     program which contains a notice placed by the copyright holder or
     other authorized party saying it may be distributed under the terms
     of this Lesser General Public License (also called “this License”).
     Each licensee is addressed as “you”.

     A “library” means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

     The “Library”, below, refers to any such software library or work
     which has been distributed under these terms.  A “work based on the
     Library” means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or
     translated straightforwardly into another language.  (Hereinafter,
     translation is included without limitation in the term
     “modification”.)

     “Source code” for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code
     means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the library.

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running a program using the Library is not restricted, and
     output from such a program is covered only if its contents
     constitute a work based on the Library (independent of the use of
     the Library in a tool for writing it).  Whether that is true
     depends on what the Library does and what the program that uses the
     Library does.

  1. You may copy and distribute verbatim copies of the Library’s
     complete source code as you receive it, in any medium, provided
     that you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and distribute a copy of this License
     along with the Library.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Library or any portion of
     it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. The modified work must itself be a software library.

       b. You must cause the files modified to carry prominent notices
          stating that you changed the files and the date of any change.

       c. You must cause the whole of the work to be licensed at no
          charge to all third parties under the terms of this License.

       d. If a facility in the modified Library refers to a function or
          a table of data to be supplied by an application program that
          uses the facility, other than as an argument passed when the
          facility is invoked, then you must make a good faith effort to
          ensure that, in the event an application does not supply such
          function or table, the facility still operates, and performs
          whatever part of its purpose remains meaningful.

          (For example, a function in a library to compute square roots
          has a purpose that is entirely well-defined independent of the
          application.  Therefore, Subsection 2d requires that any
          application-supplied function or table used by this function
          must be optional: if the application does not supply it, the
          square root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Library, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not apply
     to those sections when you distribute them as separate works.  But
     when you distribute the same sections as part of a whole which is a
     work based on the Library, the distribution of the whole must be on
     the terms of this License, whose permissions for other licensees
     extend to the entire whole, and thus to each and every part
     regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Library.

     In addition, mere aggregation of another work not based on the
     Library with the Library (or with a work based on the Library) on a
     volume of a storage or distribution medium does not bring the other
     work under the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.  To
     do this, you must alter all the notices that refer to this License,
     so that they refer to the ordinary GNU General Public License,
     version 2, instead of to this License.  (If a newer version than
     version 2 of the ordinary GNU General Public License has appeared,
     then you can specify that version instead if you wish.)  Do not
     make any other change in these notices.

     Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to
     all subsequent copies and derivative works made from that copy.

     This option is useful when you wish to copy part of the code of the
     Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or derivative
     of it, under Section 2) in object code or executable form under the
     terms of Sections 1 and 2 above provided that you accompany it with
     the complete corresponding machine-readable source code, which must
     be distributed under the terms of Sections 1 and 2 above on a
     medium customarily used for software interchange.

     If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy
     the source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being compiled
     or linked with it, is called a “work that uses the Library”.  Such
     a work, in isolation, is not a derivative work of the Library, and
     therefore falls outside the scope of this License.

     However, linking a “work that uses the Library” with the Library
     creates an executable that is a derivative of the Library (because
     it contains portions of the Library), rather than a “work that uses
     the library”.  The executable is therefore covered by this License.
     Section 6 states terms for distribution of such executables.

     When a “work that uses the Library” uses material from a header
     file that is part of the Library, the object code for the work may
     be a derivative work of the Library even though the source code is
     not.  Whether this is true is especially significant if the work
     can be linked without the Library, or if the work is itself a
     library.  The threshold for this to be true is not precisely
     defined by law.

     If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a
     derivative work.  (Executables containing this object code plus
     portions of the Library will still fall under Section 6.)

     Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section
     6.  Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or link
     a “work that uses the Library” with the Library to produce a work
     containing portions of the Library, and distribute that work under
     terms of your choice, provided that the terms permit modification
     of the work for the customer’s own use and reverse engineering for
     debugging such modifications.

     You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered
     by this License.  You must supply a copy of this License.  If the
     work during execution displays copyright notices, you must include
     the copyright notice for the Library among them, as well as a
     reference directing the user to the copy of this License.  Also,
     you must do one of these things:

       a. Accompany the work with the complete corresponding
          machine-readable source code for the Library including
          whatever changes were used in the work (which must be
          distributed under Sections 1 and 2 above); and, if the work is
          an executable linked with the Library, with the complete
          machine-readable “work that uses the Library”, as object code
          and/or source code, so that the user can modify the Library
          and then relink to produce a modified executable containing
          the modified Library.  (It is understood that the user who
          changes the contents of definitions files in the Library will
          not necessarily be able to recompile the application to use
          the modified definitions.)

       b. Use a suitable shared library mechanism for linking with the
          Library.  A suitable mechanism is one that (1) uses at run
          time a copy of the library already present on the user’s
          computer system, rather than copying library functions into
          the executable, and (2) will operate properly with a modified
          version of the library, if the user installs one, as long as
          the modified version is interface-compatible with the version
          that the work was made with.

       c. Accompany the work with a written offer, valid for at least
          three years, to give the same user the materials specified in
          Subsection 6a, above, for a charge no more than the cost of
          performing this distribution.

       d. If distribution of the work is made by offering access to copy
          from a designated place, offer equivalent access to copy the
          above specified materials from the same place.

       e. Verify that the user has already received a copy of these
          materials or that you have already sent this user a copy.

     For an executable, the required form of the “work that uses the
     Library” must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special
     exception, the materials to be distributed need not include
     anything that is normally distributed (in either source or binary
     form) with the major components (compiler, kernel, and so on) of
     the operating system on which the executable runs, unless that
     component itself accompanies the executable.

     It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you
     cannot use both them and the Library together in an executable that
     you distribute.

  7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other
     library facilities not covered by this License, and distribute such
     a combined library, provided that the separate distribution of the
     work based on the Library and of the other library facilities is
     otherwise permitted, and provided that you do these two things:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities.  This must be distributed under the terms of the
          Sections above.

       b. Give prominent notice with the combined library of the fact
          that part of it is a work based on the Library, and explaining
          where to find the accompanying uncombined form of the same
          work.

  8. You may not copy, modify, sublicense, link with, or distribute the
     Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate
     your rights under this License.  However, parties who have received
     copies, or rights, from you under this License will not have their
     licenses terminated so long as such parties remain in full
     compliance.

  9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Library or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Library (or any work
     based on the Library), you indicate your acceptance of this License
     to do so, and all its terms and conditions for copying,
     distributing or modifying the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the
     Library subject to these terms and conditions.  You may not impose
     any further restrictions on the recipients’ exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties with this License.

  11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Library at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Library by all those who receive
     copies directly or indirectly through you, then the only way you
     could satisfy both it and this License would be to refrain entirely
     from distribution of the Library.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply, and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Library under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  13. The Free Software Foundation may publish revised and/or new
     versions of the Lesser General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Library specifies a version number of this License which applies to
     it and “any later version”, you have the option of following the
     terms and conditions either of that version or of any later version
     published by the Free Software Foundation.  If the Library does not
     specify a license version number, you may choose any version ever
     published by the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting the
     sharing and reuse of software generally.

                              NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
     AND/OR OTHER PARTIES PROVIDE THE LIBRARY “AS IS” WITHOUT WARRANTY
     OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
     PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE
     DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
     OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
     OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Libraries
==============================================

If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of
the ordinary General Public License).

   To apply these terms, attach the following notices to the library.
It is safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should have
at least the “copyright” line and a pointer to where the full notice is
found.

     ONE LINE TO GIVE THE LIBRARY'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) YEAR  NAME OF AUTHOR

     This library is free software; you can redistribute it and/or modify it
     under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2.1 of the License, or (at
     your option) any later version.

     This library is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
     USA.

   Also add information on how to contact you by electronic and paper
mail.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a “copyright disclaimer” for the library,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the library
     `Frob' (a library for tweaking knobs) written by James Random Hacker.

     SIGNATURE OF TY COON, 1 April 1990
     Ty Coon, President of Vice

   That’s all there is to it!


File: gpgme.info,  Node: Copying,  Next: Concept Index,  Prev: Library Copying,  Up: Top

GNU General Public License
**************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program–to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

                         TERMS AND CONDITIONS

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short notice
like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details
     type ‘show w’.  This is free software, and you are
     welcome to redistribute it under certain conditions;
     type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/philosophy/why-not-lgpl.html>.


File: gpgme.info,  Node: Concept Index,  Next: Function and Data Index,  Prev: Copying,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* aborting operations:                   Cancellation.          (line 6)
* algorithms:                            Algorithms.            (line 6)
* algorithms, hash:                      Hash Algorithms.       (line 6)
* algorithms, message digest:            Hash Algorithms.       (line 6)
* algorithms, public key:                Public Key Algorithms. (line 6)
* armor mode:                            ASCII Armor.           (line 6)
* ASCII armor:                           ASCII Armor.           (line 6)
* ASSUAN:                                Assuan.                (line 6)
* attributes, of a key:                  Information About Keys.
                                                                (line 6)
* auditlog:                              Additional Logs.       (line 6)
* auditlog, of the engine:               Additional Logs.       (line 6)
* autoconf:                              Using Automake.        (line 6)
* automake:                              Using Automake.        (line 6)
* backend:                               Protocols and Engines. (line 6)
* callback, passphrase:                  Passphrase Callback.   (line 6)
* callback, progress meter:              Progress Meter Callback.
                                                                (line 6)
* callback, status message:              Status Message Callback.
                                                                (line 6)
* cancelling operations:                 Cancellation.          (line 6)
* canonical text mode:                   Text Mode.             (line 6)
* certificates, included:                Included Certificates. (line 6)
* CMS:                                   Cryptographic Message Syntax.
                                                                (line 6)
* compiler flags:                        Building the Source.   (line 6)
* compiler options:                      Building the Source.   (line 6)
* configuration of crypto backend:       Engine Configuration.  (line 6)
* context:                               Contexts.              (line 6)
* context, armor mode:                   ASCII Armor.           (line 6)
* context, attributes:                   Context Attributes.    (line 6)
* context, configuring engine:           Crypto Engine.         (line 6)
* context, creation:                     Creating Contexts.     (line 6)
* context, destruction:                  Destroying Contexts.   (line 6)
* context, offline mode:                 Offline Mode.          (line 6)
* context, pinentry mode:                Pinentry Mode.         (line 6)
* context, result of operation:          Result Management.     (line 6)
* context, selecting protocol:           Protocol Selection.    (line 6)
* context, sender:                       Setting the Sender.    (line 6)
* context, text mode:                    Text Mode.             (line 6)
* crypto backend:                        Protocols and Engines. (line 6)
* crypto engine:                         Protocols and Engines. (line 6)
* cryptographic message syntax:          Cryptographic Message Syntax.
                                                                (line 6)
* cryptographic operation:               Crypto Operations.     (line 6)
* cryptographic operation, aborting:     Cancellation.          (line 6)
* cryptographic operation, cancelling:   Cancellation.          (line 6)
* cryptographic operation, decryption:   Decrypt.               (line 6)
* cryptographic operation, decryption and verification: Decrypt and Verify.
                                                                (line 6)
* cryptographic operation, encryption:   Encrypt.               (line 6)
* cryptographic operation, running:      Run Control.           (line 6)
* cryptographic operation, signature check: Verify.             (line 6)
* cryptographic operation, signing:      Sign.                  (line 6)
* cryptographic operation, verification: Verify.                (line 6)
* cryptographic operation, wait for:     Waiting For Completion.
                                                                (line 6)
* data buffer, convenience:              Data Buffer Convenience.
                                                                (line 6)
* data buffer, creation:                 Creating Data Buffers. (line 6)
* data buffer, destruction:              Destroying Data Buffers.
                                                                (line 6)
* data buffer, encoding:                 Data Buffer Meta-Data. (line 6)
* data buffer, file name:                Data Buffer Meta-Data. (line 6)
* data buffer, I/O operations:           Data Buffer I/O Operations.
                                                                (line 6)
* data buffer, manipulation:             Manipulating Data Buffers.
                                                                (line 6)
* data buffer, meta-data:                Data Buffer Meta-Data. (line 6)
* data buffer, read:                     Data Buffer I/O Operations.
                                                                (line 6)
* data buffer, seek:                     Data Buffer I/O Operations.
                                                                (line 6)
* data buffer, write:                    Data Buffer I/O Operations.
                                                                (line 6)
* data, exchanging:                      Exchanging Data.       (line 6)
* debug:                                 Debugging.             (line 6)
* decryption:                            Decrypt.               (line 6)
* decryption and verification:           Decrypt and Verify.    (line 6)
* deprecated:                            Deprecated Functions.  (line 6)
* encryption:                            Encrypt.               (line 6)
* engine:                                Protocols and Engines. (line 6)
* engine, ASSUAN:                        Assuan.                (line 6)
* engine, configuration of:              Engine Configuration.  (line 6)
* engine, configuration per context:     Crypto Engine.         (line 6)
* engine, GnuPG:                         OpenPGP.               (line 6)
* engine, GpgSM:                         Cryptographic Message Syntax.
                                                                (line 6)
* engine, information about:             Engine Information.    (line 6)
* error codes:                           Error Values.          (line 6)
* error codes, list of:                  Error Sources.         (line 6)
* error codes, list of <1>:              Error Codes.           (line 6)
* error codes, printing of:              Error Strings.         (line 6)
* error handling:                        Error Handling.        (line 6)
* error sources:                         Error Values.          (line 6)
* error sources, printing of:            Error Strings.         (line 6)
* error strings:                         Error Strings.         (line 6)
* error values:                          Error Values.          (line 6)
* error values, printing of:             Error Strings.         (line 6)
* event loop, external:                  Using External Event Loops.
                                                                (line 6)
* flags, of a context:                   Context Flags.         (line 6)
* From::                                 Setting the Sender.    (line 6)
* GDK, using GPGME with:                 I/O Callback Example GDK.
                                                                (line 6)
* GnuPG:                                 OpenPGP.               (line 6)
* GPGME_DEBUG:                           Debugging.             (line 6)
* GpgSM:                                 Cryptographic Message Syntax.
                                                                (line 6)
* GTK+, using GPGME with:                I/O Callback Example GTK+.
                                                                (line 6)
* hash algorithms:                       Hash Algorithms.       (line 6)
* header file:                           Header.                (line 6)
* identify:                              Data Buffer Convenience.
                                                                (line 6)
* include file:                          Header.                (line 6)
* key listing:                           Listing Keys.          (line 6)
* key listing mode:                      Key Listing Mode.      (line 6)
* key listing, mode of:                  Key Listing Mode.      (line 6)
* key listing, start:                    Listing Keys.          (line 6)
* key management:                        Key Management.        (line 6)
* key ring, add:                         Generating Keys.       (line 6)
* key ring, delete from:                 Deleting Keys.         (line 6)
* key ring, export from:                 Exporting Keys.        (line 6)
* key ring, import to:                   Importing Keys.        (line 6)
* key ring, list:                        Listing Keys.          (line 6)
* key ring, search:                      Listing Keys.          (line 6)
* key, attributes:                       Information About Keys.
                                                                (line 6)
* key, creation:                         Generating Keys.       (line 6)
* key, delete:                           Deleting Keys.         (line 6)
* key, edit:                             Advanced Key Editing.  (line 6)
* key, export:                           Exporting Keys.        (line 6)
* key, import:                           Importing Keys.        (line 6)
* key, information about:                Information About Keys.
                                                                (line 6)
* key, manipulation:                     Manipulating Keys.     (line 6)
* key, signing:                          Signing Keys.          (line 6)
* largefile support:                     Largefile Support (LFS).
                                                                (line 6)
* LFS:                                   Largefile Support (LFS).
                                                                (line 6)
* LGPL, GNU Lesser General Public License: Library Copying.     (line 6)
* libtool:                               Using Libtool.         (line 6)
* listing keys:                          Listing Keys.          (line 6)
* locale, default:                       Locale.                (line 6)
* locale, of a context:                  Locale.                (line 6)
* message digest algorithms:             Hash Algorithms.       (line 6)
* multi-threading:                       Multi-Threading.       (line 6)
* notation data:                         Verify.                (line 6)
* notation data <1>:                     Signature Notation Data.
                                                                (line 6)
* offline mode:                          Offline Mode.          (line 6)
* OpenPGP:                               OpenPGP.               (line 6)
* passphrase callback:                   Passphrase Callback.   (line 6)
* passphrase, change:                    Changing Passphrases.  (line 6)
* pinentry mode:                         Pinentry Mode.         (line 6)
* policy URL:                            Signature Notation Data.
                                                                (line 6)
* progress meter callback:               Progress Meter Callback.
                                                                (line 6)
* protocol:                              Protocols and Engines. (line 6)
* protocol, ASSUAN:                      Assuan.                (line 6)
* protocol, CMS:                         Cryptographic Message Syntax.
                                                                (line 6)
* protocol, GnuPG:                       OpenPGP.               (line 6)
* protocol, S/MIME:                      Cryptographic Message Syntax.
                                                                (line 6)
* protocol, selecting:                   Protocol Selection.    (line 6)
* public key algorithms:                 Public Key Algorithms. (line 6)
* Qt, using GPGME with:                  I/O Callback Example Qt.
                                                                (line 6)
* run control:                           Run Control.           (line 6)
* S/MIME:                                Cryptographic Message Syntax.
                                                                (line 6)
* sender:                                Setting the Sender.    (line 6)
* sign:                                  Sign.                  (line 6)
* signal handling:                       Signal Handling.       (line 6)
* signals:                               Signal Handling.       (line 6)
* signature check:                       Decrypt and Verify.    (line 6)
* signature notation data:               Verify.                (line 6)
* signature notation data <1>:           Signature Notation Data.
                                                                (line 6)
* signature, creation:                   Sign.                  (line 6)
* signature, selecting signers:          Selecting Signers.     (line 6)
* signature, verification:               Verify.                (line 6)
* signers, selecting:                    Selecting Signers.     (line 6)
* status message callback:               Status Message Callback.
                                                                (line 6)
* text mode:                             Text Mode.             (line 6)
* thread-safeness:                       Multi-Threading.       (line 6)
* type of data:                          Data Buffer Convenience.
                                                                (line 6)
* UI server:                             UI Server Protocol.    (line 6)
* user interface server:                 UI Server Protocol.    (line 6)
* validity, TOFU:                        Changing TOFU Data.    (line 6)
* verification:                          Verify.                (line 6)
* verification and decryption:           Decrypt and Verify.    (line 6)
* version check, of the engines:         Engine Version Check.  (line 6)
* version check, of the library:         Library Version Check. (line 6)
* wait for completion:                   Waiting For Completion.
                                                                (line 6)


File: gpgme.info,  Node: Function and Data Index,  Prev: Concept Index,  Up: Top

Function and Data Index
***********************

 [index ]
* Menu:

* AM_PATH_GPGME:                         Using Automake.      (line  14)
* CHECKSUM_CREATE_FILES:                 UI Server Checksum Files.
                                                              (line   9)
* CHECKSUM_VERIFY_FILES:                 UI Server Checksum Files.
                                                              (line  22)
* DECRYPT:                               UI Server Decrypt.   (line  26)
* DECRYPT_FILES:                         UI Server Verify/Decrypt Files.
                                                              (line   9)
* DECRYPT_VERIFY_FILES:                  UI Server Verify/Decrypt Files.
                                                              (line  11)
* ENCRYPT:                               UI Server Encrypt.   (line  47)
* ENCRYPT_FILES:                         UI Server Sign/Encrypt Files.
                                                              (line   9)
* ENCRYPT_SIGN_FILES:                    UI Server Sign/Encrypt Files.
                                                              (line  11)
* enum gpgme_data_encoding_t:            Data Buffer Meta-Data.
                                                              (line  36)
* enum gpgme_data_type_t:                Data Buffer Convenience.
                                                              (line   6)
* enum gpgme_event_io_t:                 I/O Callback Interface.
                                                              (line  57)
* enum gpgme_hash_algo_t:                Hash Algorithms.     (line   9)
* enum gpgme_pinentry_mode_t:            Pinentry Mode.       (line  25)
* enum gpgme_protocol_t:                 Protocols and Engines.
                                                              (line  16)
* enum gpgme_pubkey_algo_t:              Public Key Algorithms.
                                                              (line   9)
* enum gpgme_sig_mode_t:                 Creating a Signature.
                                                              (line   6)
* enum gpgme_sig_stat_t:                 Deprecated Functions.
                                                              (line 381)
* enum gpgme_tofu_policy_t:              Changing TOFU Data.  (line  10)
* FILE:                                  UI Server Set Input Files.
                                                              (line   9)
* GETINFO:                               Miscellaneous UI Server Commands.
                                                              (line   9)
* gpgme_addrspec_from_uid:               Decrypt and Verify.  (line  47)
* gpgme_attr_t:                          Deprecated Functions.
                                                              (line 138)
* gpgme_attr_t <1>:                      Deprecated Functions.
                                                              (line 299)
* gpgme_cancel:                          Cancellation.        (line  16)
* gpgme_cancel_async:                    Cancellation.        (line  38)
* gpgme_check_version:                   Library Version Check.
                                                              (line   6)
* gpgme_ctx_get_engine_info:             Crypto Engine.       (line  12)
* gpgme_ctx_set_engine_info:             Crypto Engine.       (line  26)
* gpgme_ctx_t:                           Contexts.            (line  11)
* gpgme_data_encoding_t:                 Data Buffer Meta-Data.
                                                              (line  37)
* gpgme_data_get_encoding:               Data Buffer Meta-Data.
                                                              (line  86)
* gpgme_data_get_file_name:              Data Buffer Meta-Data.
                                                              (line   6)
* gpgme_data_identify:                   Data Buffer Convenience.
                                                              (line  46)
* gpgme_data_new:                        Memory Based Data Buffers.
                                                              (line  12)
* gpgme_data_new_from_cbs:               Callback Based Data Buffers.
                                                              (line  78)
* gpgme_data_new_from_estream:           File Based Data Buffers.
                                                              (line  49)
* gpgme_data_new_from_fd:                File Based Data Buffers.
                                                              (line  10)
* gpgme_data_new_from_file:              Memory Based Data Buffers.
                                                              (line  37)
* gpgme_data_new_from_filepart:          Memory Based Data Buffers.
                                                              (line  54)
* gpgme_data_new_from_mem:               Memory Based Data Buffers.
                                                              (line  22)
* gpgme_data_new_from_stream:            File Based Data Buffers.
                                                              (line  29)
* gpgme_data_new_with_read_cb:           Deprecated Functions.
                                                              (line 109)
* gpgme_data_read:                       Data Buffer I/O Operations.
                                                              (line   6)
* gpgme_data_read_cb_t:                  Callback Based Data Buffers.
                                                              (line  12)
* gpgme_data_release:                    Destroying Data Buffers.
                                                              (line   6)
* gpgme_data_release_and_get_mem:        Destroying Data Buffers.
                                                              (line  11)
* gpgme_data_release_cb_t:               Callback Based Data Buffers.
                                                              (line  53)
* gpgme_data_rewind:                     Deprecated Functions.
                                                              (line 132)
* gpgme_data_seek:                       Data Buffer I/O Operations.
                                                              (line  25)
* gpgme_data_seek_cb_t:                  Callback Based Data Buffers.
                                                              (line  44)
* gpgme_data_set_encoding:               Data Buffer Meta-Data.
                                                              (line  92)
* gpgme_data_set_file_name:              Data Buffer Meta-Data.
                                                              (line  18)
* gpgme_data_set_flag:                   Data Buffer Meta-Data.
                                                              (line  97)
* gpgme_data_t:                          Exchanging Data.     (line  13)
* gpgme_data_type_t:                     Data Buffer Convenience.
                                                              (line   7)
* gpgme_data_write:                      Data Buffer I/O Operations.
                                                              (line  16)
* gpgme_data_write_cb_t:                 Callback Based Data Buffers.
                                                              (line  28)
* gpgme_decrypt_result_t:                Decrypt.             (line 117)
* gpgme_edit_cb_t:                       Deprecated Functions.
                                                              (line  33)
* gpgme_encrypt_result_t:                Encrypting a Plaintext.
                                                              (line 285)
* gpgme_engine_check_version:            Engine Version Check.
                                                              (line  88)
* gpgme_engine_info_t:                   Engine Information.  (line   6)
* gpgme_error:                           Error Values.        (line  65)
* gpgme_error_from_errno:                Error Values.        (line  88)
* gpgme_error_t:                         Error Values.        (line  24)
* gpgme_error_t (*gpgme_assuan_data_cb_t) (void *OPAQUE, const void *DATA, size_t DATALEN): Using the Assuan protocol.
                                                              (line  15)
* gpgme_error_t (*gpgme_assuan_inquire_cb_t) (void *OPAQUE, const char *NAME, const char *ARGS, gpgme_data_t *R_DATA): Using the Assuan protocol.
                                                              (line  24)
* gpgme_error_t (*gpgme_assuan_status_cb_t) (void *OPAQUE, const char *STATUS, const char *ARGS): Using the Assuan protocol.
                                                              (line  37)
* gpgme_error_t (*gpgme_edit_cb_t) (void *HANDLE, gpgme_status_code_t STATUS, const char *ARGS, int FD): Deprecated Functions.
                                                              (line  31)
* gpgme_error_t (*gpgme_interact_cb_t) (void *HANDLE, const char *STATUS, const char *ARGS, int FD): Advanced Key Editing.
                                                              (line   6)
* gpgme_error_t (*gpgme_io_cb_t) (void *DATA, int FD): I/O Callback Interface.
                                                              (line   6)
* gpgme_error_t (*gpgme_passphrase_cb_t)(void *HOOK, const char *UID_HINT, const char *PASSPHRASE_INFO, int PREV_WAS_BAD, int FD): Passphrase Callback.
                                                              (line   6)
* gpgme_error_t (*gpgme_register_io_cb_t) (void *DATA, int FD, int DIR, gpgme_io_cb_t FNC, void *FNC_DATA, void **TAG): I/O Callback Interface.
                                                              (line  19)
* gpgme_error_t (*gpgme_status_cb_t)(void *HOOK, const char *KEYWORD, const char *ARGS): Status Message Callback.
                                                              (line   6)
* gpgme_err_code:                        Error Values.        (line  42)
* gpgme_err_code_from_errno:             Error Values.        (line  97)
* gpgme_err_code_t:                      Error Values.        (line   6)
* gpgme_err_code_to_errno:               Error Values.        (line 102)
* gpgme_err_make:                        Error Values.        (line  57)
* gpgme_err_make_from_errno:             Error Values.        (line  82)
* gpgme_err_source:                      Error Values.        (line  49)
* gpgme_err_source_t:                    Error Values.        (line  13)
* gpgme_event_io_t:                      I/O Callback Interface.
                                                              (line  58)
* gpgme_event_io_t <1>:                  Registering I/O Callbacks.
                                                              (line   7)
* gpgme_free:                            Destroying Data Buffers.
                                                              (line  25)
* gpgme_genkey_result_t:                 Generating Keys.     (line 389)
* gpgme_get_armor:                       ASCII Armor.         (line  13)
* gpgme_get_ctx_flag:                    Context Flags.       (line 174)
* gpgme_get_dirinfo:                     Engine Version Check.
                                                              (line   6)
* gpgme_get_engine_info:                 Engine Information.  (line  46)
* gpgme_get_include_certs:               Included Certificates.
                                                              (line  36)
* gpgme_get_io_cbs:                      Registering I/O Callbacks.
                                                              (line  44)
* gpgme_get_key:                         Listing Keys.        (line 177)
* gpgme_get_keylist_mode:                Key Listing Mode.    (line 131)
* gpgme_get_offline:                     Offline Mode.        (line  31)
* gpgme_get_passphrase_cb:               Passphrase Callback. (line  62)
* gpgme_get_pinentry_mode:               Pinentry Mode.       (line  18)
* gpgme_get_progress_cb:                 Progress Meter Callback.
                                                              (line  31)
* gpgme_get_protocol:                    Protocol Selection.  (line  21)
* gpgme_get_protocol_name:               Protocols and Engines.
                                                              (line  58)
* gpgme_get_sender:                      Setting the Sender.  (line  28)
* gpgme_get_sig_key:                     Deprecated Functions.
                                                              (line 580)
* gpgme_get_sig_status:                  Deprecated Functions.
                                                              (line 429)
* gpgme_get_sig_string_attr:             Deprecated Functions.
                                                              (line 484)
* gpgme_get_sig_ulong_attr:              Deprecated Functions.
                                                              (line 518)
* gpgme_get_status_cb:                   Status Message Callback.
                                                              (line  31)
* gpgme_get_textmode:                    Text Mode.           (line  20)
* gpgme_hash_algo_name:                  Hash Algorithms.     (line  30)
* gpgme_hash_algo_t:                     Hash Algorithms.     (line  10)
* gpgme_import_result_t:                 Importing Keys.      (line 149)
* gpgme_import_status_t:                 Importing Keys.      (line 109)
* gpgme_interact_cb_t:                   Advanced Key Editing.
                                                              (line  11)
* gpgme_invalid_key_t:                   Crypto Operations.   (line  10)
* gpgme_io_cb_t:                         I/O Callback Interface.
                                                              (line   7)
* gpgme_keylist_result_t:                Listing Keys.        (line 154)
* gpgme_key_get_string_attr:             Deprecated Functions.
                                                              (line 264)
* gpgme_key_get_ulong_attr:              Deprecated Functions.
                                                              (line 278)
* gpgme_key_ref:                         Manipulating Keys.   (line   6)
* gpgme_key_release:                     Deprecated Functions.
                                                              (line  14)
* gpgme_key_sig_get_string_attr:         Deprecated Functions.
                                                              (line 355)
* gpgme_key_sig_get_ulong_attr:          Deprecated Functions.
                                                              (line 369)
* gpgme_key_sig_t:                       Key objects.         (line 387)
* gpgme_key_t:                           Key objects.         (line  10)
* gpgme_key_unref:                       Manipulating Keys.   (line  10)
* gpgme_new:                             Creating Contexts.   (line   6)
* gpgme_new_signature_t:                 Creating a Signature.
                                                              (line  89)
* gpgme_off_t:                           Exchanging Data.     (line  24)
* gpgme_op_adduid:                       Generating Keys.     (line 197)
* gpgme_op_adduid_start:                 Generating Keys.     (line 223)
* gpgme_op_assuan_transact_ext:          Using the Assuan protocol.
                                                              (line  60)
* gpgme_op_assuan_transact_start:        Using the Assuan protocol.
                                                              (line  46)
* gpgme_op_card_edit:                    Deprecated Functions.
                                                              (line  84)
* gpgme_op_card_edit_start:              Deprecated Functions.
                                                              (line  94)
* gpgme_op_createkey:                    Generating Keys.     (line  14)
* gpgme_op_createkey_start:              Generating Keys.     (line 126)
* gpgme_op_createsubkey:                 Generating Keys.     (line 138)
* gpgme_op_createsubkey_start:           Generating Keys.     (line 185)
* gpgme_op_decrypt:                      Decrypt.             (line   6)
* gpgme_op_decrypt_ext:                  Decrypt.             (line  33)
* gpgme_op_decrypt_ext_start:            Decrypt.             (line  77)
* gpgme_op_decrypt_result:               Decrypt.             (line 185)
* gpgme_op_decrypt_start:                Decrypt.             (line  23)
* gpgme_op_decrypt_verify:               Decrypt and Verify.  (line   6)
* gpgme_op_decrypt_verify_start:         Decrypt and Verify.  (line  30)
* gpgme_op_delete:                       Deleting Keys.       (line  48)
* gpgme_op_delete_ext:                   Deleting Keys.       (line   6)
* gpgme_op_delete_ext_start:             Deleting Keys.       (line  33)
* gpgme_op_delete_start:                 Deleting Keys.       (line  54)
* gpgme_op_edit:                         Deprecated Functions.
                                                              (line  44)
* gpgme_op_edit_start:                   Deprecated Functions.
                                                              (line  67)
* gpgme_op_encrypt:                      Encrypting a Plaintext.
                                                              (line   6)
* gpgme_op_encrypt_ext:                  Encrypting a Plaintext.
                                                              (line 178)
* gpgme_op_encrypt_ext_start:            Encrypting a Plaintext.
                                                              (line 270)
* gpgme_op_encrypt_result:               Encrypting a Plaintext.
                                                              (line 296)
* gpgme_op_encrypt_sign:                 Encrypting a Plaintext.
                                                              (line 307)
* gpgme_op_encrypt_sign_ext:             Encrypting a Plaintext.
                                                              (line 329)
* gpgme_op_encrypt_sign_ext_start:       Encrypting a Plaintext.
                                                              (line 344)
* gpgme_op_encrypt_sign_start:           Encrypting a Plaintext.
                                                              (line 317)
* gpgme_op_encrypt_start:                Encrypting a Plaintext.
                                                              (line 161)
* gpgme_op_export:                       Exporting Keys.      (line  65)
* gpgme_op_export_ext:                   Exporting Keys.      (line  96)
* gpgme_op_export_ext_start:             Exporting Keys.      (line 117)
* gpgme_op_export_keys:                  Exporting Keys.      (line 128)
* gpgme_op_export_keys_start:            Exporting Keys.      (line 153)
* gpgme_op_export_start:                 Exporting Keys.      (line  85)
* gpgme_op_genkey:                       Generating Keys.     (line 312)
* gpgme_op_genkey_result:                Generating Keys.     (line 426)
* gpgme_op_genkey_start:                 Generating Keys.     (line 377)
* gpgme_op_getauditlog:                  Additional Logs.     (line   9)
* gpgme_op_getauditlog_start:            Additional Logs.     (line  54)
* gpgme_op_import:                       Importing Keys.      (line   9)
* gpgme_op_import_ext:                   Deprecated Functions.
                                                              (line  18)
* gpgme_op_import_keys:                  Importing Keys.      (line  35)
* gpgme_op_import_keys_start:            Importing Keys.      (line  65)
* gpgme_op_import_result:                Importing Keys.      (line 205)
* gpgme_op_import_start:                 Importing Keys.      (line  24)
* gpgme_op_interact:                     Advanced Key Editing.
                                                              (line  23)
* gpgme_op_interact_start:               Advanced Key Editing.
                                                              (line  53)
* gpgme_op_keylist_end:                  Listing Keys.        (line 110)
* gpgme_op_keylist_ext_start:            Listing Keys.        (line  34)
* gpgme_op_keylist_from_data_start:      Listing Keys.        (line  66)
* gpgme_op_keylist_next:                 Listing Keys.        (line  93)
* gpgme_op_keylist_result:               Listing Keys.        (line 165)
* gpgme_op_keylist_start:                Listing Keys.        (line   6)
* gpgme_op_keysign:                      Signing Keys.        (line  12)
* gpgme_op_keysign_start:                Signing Keys.        (line  78)
* gpgme_op_passwd:                       Changing Passphrases.
                                                              (line   6)
* gpgme_op_passwd_start:                 Changing Passphrases.
                                                              (line  21)
* gpgme_op_query_swdb:                   Checking for updates.
                                                              (line  68)
* gpgme_op_query_swdb_result:            Checking for updates.
                                                              (line  80)
* gpgme_op_receive_keys:                 Importing Keys.      (line  79)
* gpgme_op_receive_keys_start:           Importing Keys.      (line  96)
* gpgme_op_revsig:                       Signing Keys.        (line  89)
* gpgme_op_revsig_start:                 Signing Keys.        (line 124)
* gpgme_op_revuid:                       Generating Keys.     (line 232)
* gpgme_op_revuid_start:                 Generating Keys.     (line 260)
* gpgme_op_setexpire:                    Manipulating Keys.   (line  15)
* gpgme_op_setexpire_start:              Manipulating Keys.   (line  47)
* gpgme_op_setownertrust:                Manipulating Keys.   (line  58)
* gpgme_op_setownertrust_start:          Manipulating Keys.   (line  81)
* gpgme_op_set_uid_flag_start:           Generating Keys.     (line 301)
* gpgme_op_set_ui_flag:                  Generating Keys.     (line 269)
* gpgme_op_sign:                         Creating a Signature.
                                                              (line  39)
* gpgme_op_sign_result:                  Creating a Signature.
                                                              (line 132)
* gpgme_op_sign_start:                   Creating a Signature.
                                                              (line  79)
* gpgme_op_spawn:                        Running other Programs.
                                                              (line  13)
* gpgme_op_spawn_start:                  Running other Programs.
                                                              (line  45)
* gpgme_op_tofu_policy:                  Changing TOFU Data.  (line  29)
* gpgme_op_tofu_policy_start:            Changing TOFU Data.  (line  43)
* gpgme_op_verify:                       Verify.              (line   6)
* gpgme_op_verify_ext:                   Verify.              (line  44)
* gpgme_op_verify_ext_start:             Verify.              (line  72)
* gpgme_op_verify_result:                Verify.              (line 355)
* gpgme_op_verify_start:                 Verify.              (line  32)
* gpgme_passphrase_cb_t:                 Passphrase Callback. (line   9)
* gpgme_pinentry_mode_t:                 Pinentry Mode.       (line  26)
* gpgme_progress_cb_t:                   Progress Meter Callback.
                                                              (line   8)
* gpgme_protocol_t:                      Protocols and Engines.
                                                              (line  17)
* gpgme_protocol_t <1>:                  Engine Information.  (line   7)
* gpgme_pubkey_algo_name:                Public Key Algorithms.
                                                              (line  58)
* gpgme_pubkey_algo_string:              Public Key Algorithms.
                                                              (line  67)
* gpgme_pubkey_algo_t:                   Public Key Algorithms.
                                                              (line  10)
* gpgme_query_swdb_result_t:             Checking for updates.
                                                              (line  11)
* gpgme_recipient_t:                     Decrypt.             (line  91)
* gpgme_register_io_cb_t:                I/O Callback Interface.
                                                              (line  22)
* gpgme_release:                         Destroying Contexts. (line   6)
* gpgme_result_ref:                      Result Management.   (line  15)
* gpgme_result_unref:                    Result Management.   (line  23)
* gpgme_revocation_key_t:                Key objects.         (line 472)
* gpgme_set_armor:                       ASCII Armor.         (line   6)
* gpgme_set_ctx_flag:                    Context Flags.       (line   6)
* gpgme_set_engine_info:                 Engine Configuration.
                                                              (line  11)
* gpgme_set_global_flag:                 Library Version Check.
                                                              (line  43)
* gpgme_set_include_certs:               Included Certificates.
                                                              (line   6)
* gpgme_set_io_cbs:                      Registering I/O Callbacks.
                                                              (line  35)
* gpgme_set_keylist_mode:                Key Listing Mode.    (line   6)
* gpgme_set_locale:                      Locale.              (line  14)
* gpgme_set_offline:                     Offline Mode.        (line   6)
* gpgme_set_passphrase_cb:               Passphrase Callback. (line  39)
* gpgme_set_pinentry_mode:               Pinentry Mode.       (line   6)
* gpgme_set_progress_cb:                 Progress Meter Callback.
                                                              (line  16)
* gpgme_set_protocol:                    Protocol Selection.  (line   6)
* gpgme_set_sender:                      Setting the Sender.  (line  13)
* gpgme_set_status_cb:                   Status Message Callback.
                                                              (line  17)
* gpgme_set_textmode:                    Text Mode.           (line   6)
* gpgme_signature_t:                     Verify.              (line 139)
* gpgme_signers_add:                     Selecting Signers.   (line  18)
* gpgme_signers_clear:                   Selecting Signers.   (line  11)
* gpgme_signers_count:                   Selecting Signers.   (line  25)
* gpgme_signers_enum:                    Selecting Signers.   (line  31)
* gpgme_sign_result_t:                   Creating a Signature.
                                                              (line 118)
* gpgme_sig_mode_t:                      Creating a Signature.
                                                              (line   7)
* gpgme_sig_notation_add:                Signature Notation Data.
                                                              (line  19)
* gpgme_sig_notation_clear:              Signature Notation Data.
                                                              (line  10)
* gpgme_sig_notation_get:                Signature Notation Data.
                                                              (line  45)
* gpgme_sig_notation_t:                  Verify.              (line  85)
* gpgme_sig_stat_t:                      Deprecated Functions.
                                                              (line 382)
* gpgme_ssize_t:                         Exchanging Data.     (line  32)
* gpgme_status_cb_t:                     Status Message Callback.
                                                              (line   8)
* gpgme_strerror:                        Error Strings.       (line   6)
* gpgme_strerror_r:                      Error Strings.       (line  15)
* gpgme_strsource:                       Error Strings.       (line  26)
* gpgme_subkey_t:                        Key objects.         (line 144)
* gpgme_tofu_info_t:                     Key objects.         (line 323)
* gpgme_tofu_policy_t:                   Changing TOFU Data.  (line  13)
* gpgme_user_id_t:                       Key objects.         (line 258)
* gpgme_validity_t:                      Information About Keys.
                                                              (line   9)
* gpgme_verify_result_t:                 Verify.              (line 333)
* gpgme_wait:                            Waiting For Completion.
                                                              (line   6)
* IMPORT_FILES:                          UI Server Import/Export Keys.
                                                              (line   9)
* INPUT:                                 UI Server Encrypt.   (line  23)
* INPUT <1>:                             UI Server Sign.      (line  12)
* INPUT <2>:                             UI Server Decrypt.   (line  12)
* INPUT <3>:                             UI Server Verify.    (line  16)
* MESSAGE:                               UI Server Verify.    (line  10)
* MICALG:                                UI Server Sign.      (line  43)
* off_t (*gpgme_data_seek_cb_t) (void *HANDLE, off_t OFFSET, int WHENCE): Callback Based Data Buffers.
                                                              (line  42)
* OUTPUT:                                UI Server Encrypt.   (line  36)
* OUTPUT <1>:                            UI Server Sign.      (line  18)
* OUTPUT <2>:                            UI Server Decrypt.   (line  19)
* OUTPUT <3>:                            UI Server Verify.    (line  23)
* PREP_ENCRYPT:                          UI Server Encrypt.   (line  72)
* PROTOCOL:                              UI Server Encrypt.   (line  98)
* RECIPIENT:                             UI Server Encrypt.   (line   9)
* SENDER:                                Miscellaneous UI Server Commands.
                                                              (line  50)
* SESSION:                               Miscellaneous UI Server Commands.
                                                              (line  69)
* SIGN:                                  UI Server Sign.      (line  33)
* SIGN_FILES:                            UI Server Sign/Encrypt Files.
                                                              (line  10)
* SIGSTATUS:                             UI Server Verify.    (line  56)
* ssize_t (*gpgme_data_read_cb_t) (void *HANDLE, void *BUFFER, size_t SIZE): Callback Based Data Buffers.
                                                              (line  10)
* ssize_t (*gpgme_data_write_cb_t) (void *HANDLE, const void *BUFFER, size_t SIZE): Callback Based Data Buffers.
                                                              (line  26)
* START_CONFDIALOG:                      Miscellaneous UI Server Commands.
                                                              (line  41)
* START_KEYMANAGER:                      Miscellaneous UI Server Commands.
                                                              (line  31)
* struct gpgme_data_cbs:                 Callback Based Data Buffers.
                                                              (line  57)
* struct gpgme_io_cbs:                   Registering I/O Callbacks.
                                                              (line   6)
* VERIFY:                                UI Server Verify.    (line  31)
* VERIFY_FILES:                          UI Server Verify/Decrypt Files.
                                                              (line  10)
* void (*gpgme_data_release_cb_t) (void *HANDLE): Callback Based Data Buffers.
                                                              (line  52)
* void (*gpgme_event_io_cb_t) (void *DATA, gpgme_event_io_t TYPE, void *TYPE_DATA): I/O Callback Interface.
                                                              (line  82)
* void (*gpgme_progress_cb_t)(void *HOOK, const char *WHAT, int TYPE, int CURRENT, int TOTAL): Progress Meter Callback.
                                                              (line   6)
* void (*gpgme_remove_io_cb_t) (void *TAG): I/O Callback Interface.
                                                              (line  47)
* window-id:                             Miscellaneous UI Server Commands.
                                                              (line  21)

